<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="snake.basic.FullGameTests" tests="7" skipped="0" failures="3" errors="0" timestamp="2020-09-11T15:21:48" hostname="JARVIS" time="0.069">
  <properties/>
  <testcase name="testGame3x1" classname="snake.basic.FullGameTests" time="0.002"/>
  <testcase name="testGame6x6" classname="snake.basic.FullGameTests" time="0.011"/>
  <testcase name="testGame6x3" classname="snake.basic.FullGameTests" time="0.006"/>
  <testcase name="testGame10x7" classname="snake.basic.FullGameTests" time="0.026"/>
  <testcase name="testInterleave6x3and10x7" classname="snake.basic.FullGameTests" time="0.015">
    <failure message="org.scalatest.exceptions.TestFailedException: didPass was false&#10; Hint: It should be possible to “run” multiple games simultaneously, i.e., it should not be a problem to have multiple instances of SnakeLogic which act independently. To test this, we perform “interleave tests”: we instantiate two SnakeLogic objects with different board sizes and alternate between performing a step on one and a step on the other. If all is correct, the two games should progress exactly as they would if they were the only snake games being run. If this is not true, then there is likely some global state through which one game influences the other.   Hence if you fail this test but you passed the other full game test, then you have some global state. Running two instances of SnakeLogic/and alternately doing steps between them results in some interference.   " type="org.scalatest.exceptions.TestFailedException">org.scalatest.exceptions.TestFailedException: didPass was false
 Hint: It should be possible to “run” multiple games simultaneously, i.e., it should not be a problem to have multiple instances of SnakeLogic which act independently. To test this, we perform “interleave tests”: we instantiate two SnakeLogic objects with different board sizes and alternate between performing a step on one and a step on the other. If all is correct, the two games should progress exactly as they would if they were the only snake games being run. If this is not true, then there is likely some global state through which one game influences the other.   Hence if you fail this test but you passed the other full game test, then you have some global state. Running two instances of SnakeLogic/and alternately doing steps between them results in some interference.   
	at org.scalatest.Assertions.newAssertionFailedException(Assertions.scala:530)
	at org.scalatest.Assertions.newAssertionFailedException$(Assertions.scala:529)
	at org.scalatest.FunSuite.newAssertionFailedException(FunSuite.scala:1560)
	at org.scalatest.Assertions$AssertionsHelper.macroAssert(Assertions.scala:503)
	at generic.GameTestSuite.checkInterleave(GameTestSuite.scala:303)
	at snake.SnakeTestSuiteBase.checkInterleave(SnakeTestSuiteBase.scala:107)
	at snake.basic.FullGameTests.$anonfun$new$5(FullGameTests.scala:753)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
	at infrastructure.TestBase.$anonfun$test$1(TestBase.scala:36)
	at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
	at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
	at org.scalatest.Transformer.apply(Transformer.scala:22)
	at org.scalatest.Transformer.apply(Transformer.scala:20)
	at org.scalatest.FunSuiteLike$$anon$1.apply(FunSuiteLike.scala:186)
	at org.scalatest.TestSuite.withFixture(TestSuite.scala:196)
	at org.scalatest.TestSuite.withFixture$(TestSuite.scala:195)
	at infrastructure.TestBase.org$scalatest$concurrent$TimeLimitedTests$$super$withFixture(TestBase.scala:9)
	at org.scalatest.concurrent.TimeLimitedTests.$anonfun$withFixture$3(TimeLimitedTests.scala:154)
	at org.scalatest.enablers.Timed$$anon$1.timeoutAfter(Timed.scala:127)
	at org.scalatest.concurrent.TimeLimits.failAfterImpl(TimeLimits.scala:239)
	at org.scalatest.concurrent.TimeLimits.failAfterImpl$(TimeLimits.scala:233)
	at org.scalatest.concurrent.TimeLimits$.failAfterImpl(TimeLimits.scala:305)
	at org.scalatest.concurrent.TimeLimitedTests.withFixture(TimeLimitedTests.scala:153)
	at org.scalatest.concurrent.TimeLimitedTests.withFixture$(TimeLimitedTests.scala:150)
	at infrastructure.TestBase.withFixture(TestBase.scala:9)
	at org.scalatest.FunSuiteLike.invokeWithFixture$1(FunSuiteLike.scala:184)
	at org.scalatest.FunSuiteLike.$anonfun$runTest$1(FunSuiteLike.scala:196)
	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:286)
	at org.scalatest.FunSuiteLike.runTest(FunSuiteLike.scala:196)
	at org.scalatest.FunSuiteLike.runTest$(FunSuiteLike.scala:178)
	at org.scalatest.FunSuite.runTest(FunSuite.scala:1560)
	at org.scalatest.FunSuiteLike.$anonfun$runTests$1(FunSuiteLike.scala:229)
	at org.scalatest.SuperEngine.$anonfun$runTestsInBranch$1(Engine.scala:393)
	at scala.collection.immutable.List.foreach(List.scala:305)
	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:381)
	at org.scalatest.SuperEngine.runTestsInBranch(Engine.scala:376)
	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:458)
	at org.scalatest.FunSuiteLike.runTests(FunSuiteLike.scala:229)
	at org.scalatest.FunSuiteLike.runTests$(FunSuiteLike.scala:228)
	at org.scalatest.FunSuite.runTests(FunSuite.scala:1560)
	at org.scalatest.Suite.run(Suite.scala:1124)
	at org.scalatest.Suite.run$(Suite.scala:1106)
	at org.scalatest.FunSuite.org$scalatest$FunSuiteLike$$super$run(FunSuite.scala:1560)
	at org.scalatest.FunSuiteLike.$anonfun$run$1(FunSuiteLike.scala:233)
	at org.scalatest.SuperEngine.runImpl(Engine.scala:518)
	at org.scalatest.FunSuiteLike.run(FunSuiteLike.scala:233)
	at org.scalatest.FunSuiteLike.run$(FunSuiteLike.scala:232)
	at infrastructure.TestBase.run(TestBase.scala:26)
	at org.scalatest.Suite.callExecuteOnSuite$1(Suite.scala:1187)
	at org.scalatest.Suite.$anonfun$runNestedSuites$1(Suite.scala:1234)
	at scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1323)
	at org.scalatest.Suite.runNestedSuites(Suite.scala:1232)
	at org.scalatest.Suite.runNestedSuites$(Suite.scala:1166)
	at org.scalatest.Suites.runNestedSuites(Suites.scala:56)
	at org.scalatest.Suite.run(Suite.scala:1121)
	at org.scalatest.Suite.run$(Suite.scala:1106)
	at snake.SnakeTestSuite.runDirect(SnakeTestSuite.scala:24)
	at snake.SnakeTestSuite.run(SnakeTestSuite.scala:16)
	at org.scalatestplus.junit.JUnitRunner.run(JUnitRunner.scala:99)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38)
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:118)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:175)
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:157)
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55)
	at java.lang.Thread.run(Thread.java:748)
</failure>
  </testcase>
  <testcase name="testInterleave6x6and10x7" classname="snake.basic.FullGameTests" time="0.002">
    <failure message="org.scalatest.exceptions.TestFailedException: didPass was false&#10; Hint: It should be possible to “run” multiple games simultaneously, i.e., it should not be a problem to have multiple instances of SnakeLogic which act independently. To test this, we perform “interleave tests”: we instantiate two SnakeLogic objects with different board sizes and alternate between performing a step on one and a step on the other. If all is correct, the two games should progress exactly as they would if they were the only snake games being run. If this is not true, then there is likely some global state through which one game influences the other.   Hence if you fail this test but you passed the other full game test, then you have some global state. Running two instances of SnakeLogic/and alternately doing steps between them results in some interference.   " type="org.scalatest.exceptions.TestFailedException">org.scalatest.exceptions.TestFailedException: didPass was false
 Hint: It should be possible to “run” multiple games simultaneously, i.e., it should not be a problem to have multiple instances of SnakeLogic which act independently. To test this, we perform “interleave tests”: we instantiate two SnakeLogic objects with different board sizes and alternate between performing a step on one and a step on the other. If all is correct, the two games should progress exactly as they would if they were the only snake games being run. If this is not true, then there is likely some global state through which one game influences the other.   Hence if you fail this test but you passed the other full game test, then you have some global state. Running two instances of SnakeLogic/and alternately doing steps between them results in some interference.   
	at org.scalatest.Assertions.newAssertionFailedException(Assertions.scala:530)
	at org.scalatest.Assertions.newAssertionFailedException$(Assertions.scala:529)
	at org.scalatest.FunSuite.newAssertionFailedException(FunSuite.scala:1560)
	at org.scalatest.Assertions$AssertionsHelper.macroAssert(Assertions.scala:503)
	at generic.GameTestSuite.checkInterleave(GameTestSuite.scala:303)
	at snake.SnakeTestSuiteBase.checkInterleave(SnakeTestSuiteBase.scala:107)
	at snake.basic.FullGameTests.$anonfun$new$6(FullGameTests.scala:757)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
	at infrastructure.TestBase.$anonfun$test$1(TestBase.scala:36)
	at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
	at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
	at org.scalatest.Transformer.apply(Transformer.scala:22)
	at org.scalatest.Transformer.apply(Transformer.scala:20)
	at org.scalatest.FunSuiteLike$$anon$1.apply(FunSuiteLike.scala:186)
	at org.scalatest.TestSuite.withFixture(TestSuite.scala:196)
	at org.scalatest.TestSuite.withFixture$(TestSuite.scala:195)
	at infrastructure.TestBase.org$scalatest$concurrent$TimeLimitedTests$$super$withFixture(TestBase.scala:9)
	at org.scalatest.concurrent.TimeLimitedTests.$anonfun$withFixture$3(TimeLimitedTests.scala:154)
	at org.scalatest.enablers.Timed$$anon$1.timeoutAfter(Timed.scala:127)
	at org.scalatest.concurrent.TimeLimits.failAfterImpl(TimeLimits.scala:239)
	at org.scalatest.concurrent.TimeLimits.failAfterImpl$(TimeLimits.scala:233)
	at org.scalatest.concurrent.TimeLimits$.failAfterImpl(TimeLimits.scala:305)
	at org.scalatest.concurrent.TimeLimitedTests.withFixture(TimeLimitedTests.scala:153)
	at org.scalatest.concurrent.TimeLimitedTests.withFixture$(TimeLimitedTests.scala:150)
	at infrastructure.TestBase.withFixture(TestBase.scala:9)
	at org.scalatest.FunSuiteLike.invokeWithFixture$1(FunSuiteLike.scala:184)
	at org.scalatest.FunSuiteLike.$anonfun$runTest$1(FunSuiteLike.scala:196)
	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:286)
	at org.scalatest.FunSuiteLike.runTest(FunSuiteLike.scala:196)
	at org.scalatest.FunSuiteLike.runTest$(FunSuiteLike.scala:178)
	at org.scalatest.FunSuite.runTest(FunSuite.scala:1560)
	at org.scalatest.FunSuiteLike.$anonfun$runTests$1(FunSuiteLike.scala:229)
	at org.scalatest.SuperEngine.$anonfun$runTestsInBranch$1(Engine.scala:393)
	at scala.collection.immutable.List.foreach(List.scala:305)
	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:381)
	at org.scalatest.SuperEngine.runTestsInBranch(Engine.scala:376)
	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:458)
	at org.scalatest.FunSuiteLike.runTests(FunSuiteLike.scala:229)
	at org.scalatest.FunSuiteLike.runTests$(FunSuiteLike.scala:228)
	at org.scalatest.FunSuite.runTests(FunSuite.scala:1560)
	at org.scalatest.Suite.run(Suite.scala:1124)
	at org.scalatest.Suite.run$(Suite.scala:1106)
	at org.scalatest.FunSuite.org$scalatest$FunSuiteLike$$super$run(FunSuite.scala:1560)
	at org.scalatest.FunSuiteLike.$anonfun$run$1(FunSuiteLike.scala:233)
	at org.scalatest.SuperEngine.runImpl(Engine.scala:518)
	at org.scalatest.FunSuiteLike.run(FunSuiteLike.scala:233)
	at org.scalatest.FunSuiteLike.run$(FunSuiteLike.scala:232)
	at infrastructure.TestBase.run(TestBase.scala:26)
	at org.scalatest.Suite.callExecuteOnSuite$1(Suite.scala:1187)
	at org.scalatest.Suite.$anonfun$runNestedSuites$1(Suite.scala:1234)
	at scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1323)
	at org.scalatest.Suite.runNestedSuites(Suite.scala:1232)
	at org.scalatest.Suite.runNestedSuites$(Suite.scala:1166)
	at org.scalatest.Suites.runNestedSuites(Suites.scala:56)
	at org.scalatest.Suite.run(Suite.scala:1121)
	at org.scalatest.Suite.run$(Suite.scala:1106)
	at snake.SnakeTestSuite.runDirect(SnakeTestSuite.scala:24)
	at snake.SnakeTestSuite.run(SnakeTestSuite.scala:16)
	at org.scalatestplus.junit.JUnitRunner.run(JUnitRunner.scala:99)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38)
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:118)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:175)
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:157)
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55)
	at java.lang.Thread.run(Thread.java:748)
</failure>
  </testcase>
  <testcase name="testInterleave6x3and6x6" classname="snake.basic.FullGameTests" time="0.004">
    <failure message="org.scalatest.exceptions.TestFailedException: didPass was false&#10; Hint: It should be possible to “run” multiple games simultaneously, i.e., it should not be a problem to have multiple instances of SnakeLogic which act independently. To test this, we perform “interleave tests”: we instantiate two SnakeLogic objects with different board sizes and alternate between performing a step on one and a step on the other. If all is correct, the two games should progress exactly as they would if they were the only snake games being run. If this is not true, then there is likely some global state through which one game influences the other.   Hence if you fail this test but you passed the other full game test, then you have some global state. Running two instances of SnakeLogic/and alternately doing steps between them results in some interference.   " type="org.scalatest.exceptions.TestFailedException">org.scalatest.exceptions.TestFailedException: didPass was false
 Hint: It should be possible to “run” multiple games simultaneously, i.e., it should not be a problem to have multiple instances of SnakeLogic which act independently. To test this, we perform “interleave tests”: we instantiate two SnakeLogic objects with different board sizes and alternate between performing a step on one and a step on the other. If all is correct, the two games should progress exactly as they would if they were the only snake games being run. If this is not true, then there is likely some global state through which one game influences the other.   Hence if you fail this test but you passed the other full game test, then you have some global state. Running two instances of SnakeLogic/and alternately doing steps between them results in some interference.   
	at org.scalatest.Assertions.newAssertionFailedException(Assertions.scala:530)
	at org.scalatest.Assertions.newAssertionFailedException$(Assertions.scala:529)
	at org.scalatest.FunSuite.newAssertionFailedException(FunSuite.scala:1560)
	at org.scalatest.Assertions$AssertionsHelper.macroAssert(Assertions.scala:503)
	at generic.GameTestSuite.checkInterleave(GameTestSuite.scala:303)
	at snake.SnakeTestSuiteBase.checkInterleave(SnakeTestSuiteBase.scala:107)
	at snake.basic.FullGameTests.$anonfun$new$7(FullGameTests.scala:762)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
	at infrastructure.TestBase.$anonfun$test$1(TestBase.scala:36)
	at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
	at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
	at org.scalatest.Transformer.apply(Transformer.scala:22)
	at org.scalatest.Transformer.apply(Transformer.scala:20)
	at org.scalatest.FunSuiteLike$$anon$1.apply(FunSuiteLike.scala:186)
	at org.scalatest.TestSuite.withFixture(TestSuite.scala:196)
	at org.scalatest.TestSuite.withFixture$(TestSuite.scala:195)
	at infrastructure.TestBase.org$scalatest$concurrent$TimeLimitedTests$$super$withFixture(TestBase.scala:9)
	at org.scalatest.concurrent.TimeLimitedTests.$anonfun$withFixture$3(TimeLimitedTests.scala:154)
	at org.scalatest.enablers.Timed$$anon$1.timeoutAfter(Timed.scala:127)
	at org.scalatest.concurrent.TimeLimits.failAfterImpl(TimeLimits.scala:239)
	at org.scalatest.concurrent.TimeLimits.failAfterImpl$(TimeLimits.scala:233)
	at org.scalatest.concurrent.TimeLimits$.failAfterImpl(TimeLimits.scala:305)
	at org.scalatest.concurrent.TimeLimitedTests.withFixture(TimeLimitedTests.scala:153)
	at org.scalatest.concurrent.TimeLimitedTests.withFixture$(TimeLimitedTests.scala:150)
	at infrastructure.TestBase.withFixture(TestBase.scala:9)
	at org.scalatest.FunSuiteLike.invokeWithFixture$1(FunSuiteLike.scala:184)
	at org.scalatest.FunSuiteLike.$anonfun$runTest$1(FunSuiteLike.scala:196)
	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:286)
	at org.scalatest.FunSuiteLike.runTest(FunSuiteLike.scala:196)
	at org.scalatest.FunSuiteLike.runTest$(FunSuiteLike.scala:178)
	at org.scalatest.FunSuite.runTest(FunSuite.scala:1560)
	at org.scalatest.FunSuiteLike.$anonfun$runTests$1(FunSuiteLike.scala:229)
	at org.scalatest.SuperEngine.$anonfun$runTestsInBranch$1(Engine.scala:393)
	at scala.collection.immutable.List.foreach(List.scala:305)
	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:381)
	at org.scalatest.SuperEngine.runTestsInBranch(Engine.scala:376)
	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:458)
	at org.scalatest.FunSuiteLike.runTests(FunSuiteLike.scala:229)
	at org.scalatest.FunSuiteLike.runTests$(FunSuiteLike.scala:228)
	at org.scalatest.FunSuite.runTests(FunSuite.scala:1560)
	at org.scalatest.Suite.run(Suite.scala:1124)
	at org.scalatest.Suite.run$(Suite.scala:1106)
	at org.scalatest.FunSuite.org$scalatest$FunSuiteLike$$super$run(FunSuite.scala:1560)
	at org.scalatest.FunSuiteLike.$anonfun$run$1(FunSuiteLike.scala:233)
	at org.scalatest.SuperEngine.runImpl(Engine.scala:518)
	at org.scalatest.FunSuiteLike.run(FunSuiteLike.scala:233)
	at org.scalatest.FunSuiteLike.run$(FunSuiteLike.scala:232)
	at infrastructure.TestBase.run(TestBase.scala:26)
	at org.scalatest.Suite.callExecuteOnSuite$1(Suite.scala:1187)
	at org.scalatest.Suite.$anonfun$runNestedSuites$1(Suite.scala:1234)
	at scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1323)
	at org.scalatest.Suite.runNestedSuites(Suite.scala:1232)
	at org.scalatest.Suite.runNestedSuites$(Suite.scala:1166)
	at org.scalatest.Suites.runNestedSuites(Suites.scala:56)
	at org.scalatest.Suite.run(Suite.scala:1121)
	at org.scalatest.Suite.run$(Suite.scala:1106)
	at snake.SnakeTestSuite.runDirect(SnakeTestSuite.scala:24)
	at snake.SnakeTestSuite.run(SnakeTestSuite.scala:16)
	at org.scalatestplus.junit.JUnitRunner.run(JUnitRunner.scala:99)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38)
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:118)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:175)
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:157)
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55)
	at java.lang.Thread.run(Thread.java:748)
</failure>
  </testcase>
  <system-out><![CDATA[List(Point(3,0), Point(4,0), Point(5,0), Point(0,1), Point(1,1), Point(2,1), Point(3,1), Point(4,1), Point(5,1), Point(0,2), Point(1,2), Point(2,2), Point(3,2), Point(4,2), Point(5,2), Point(0,3), Point(1,3), Point(2,3), Point(3,3), Point(4,3), Point(5,3), Point(0,4), Point(1,4), Point(2,4), Point(3,4), Point(4,4), Point(5,4), Point(0,5), Point(1,5), Point(2,5), Point(3,5), Point(4,5), Point(5,5))
apple: Point(5,0)
List(Point(0,0), Point(1,0), Point(2,0), Point(0,1), Point(1,1), Point(2,1), Point(3,1), Point(4,1), Point(5,1), Point(0,2), Point(1,2), Point(2,2), Point(3,2), Point(4,2), Point(5,2), Point(0,3), Point(1,3), Point(2,3), Point(3,3), Point(4,3), Point(5,3), Point(0,4), Point(1,4), Point(2,4), Point(3,4), Point(4,4), Point(5,4), Point(0,5), Point(1,5), Point(2,5), Point(3,5), Point(4,5), Point(5,5))
apple: Point(2,0)
List(Point(0,1), Point(1,1), Point(2,1), Point(3,1), Point(4,1), Point(5,1), Point(0,2), Point(1,2), Point(2,2), Point(3,2), Point(4,2), Point(5,2), Point(0,3), Point(1,3), Point(2,3), Point(3,3), Point(4,3), Point(5,3), Point(0,4), Point(1,4), Point(2,4), Point(3,4), Point(4,4), Point(5,4), Point(0,5), Point(1,5), Point(2,5), Point(3,5), Point(4,5), Point(5,5))
apple: Point(2,1)
List(Point(0,1), Point(1,1), Point(3,1), Point(4,1), Point(5,1), Point(0,2), Point(1,2), Point(2,2), Point(3,2), Point(4,2), Point(5,2), Point(0,3), Point(1,3), Point(2,3), Point(3,3), Point(4,3), Point(5,3), Point(0,4), Point(1,4), Point(2,4), Point(3,4), Point(4,4), Point(5,4), Point(0,5), Point(1,5), Point(2,5), Point(3,5), Point(4,5), Point(5,5))
apple: Point(3,1)
List(Point(3,0), Point(4,0), Point(0,2), Point(3,2), Point(4,2), Point(5,2), Point(0,3), Point(1,3), Point(2,3), Point(3,3), Point(4,3), Point(5,3), Point(0,4), Point(1,4), Point(2,4), Point(3,4), Point(4,4), Point(5,4), Point(0,5), Point(1,5), Point(2,5), Point(3,5), Point(4,5), Point(5,5))
apple: Point(0,2)
List(Point(0,0), Point(1,0), Point(2,0), Point(4,0), Point(5,0), Point(2,1), Point(3,2), Point(4,2), Point(5,2), Point(1,3), Point(2,3), Point(3,3), Point(4,3), Point(5,3), Point(4,4), Point(5,4), Point(0,5), Point(1,5), Point(2,5), Point(4,5), Point(5,5))
apple: Point(2,0)
List(Point(3,0), Point(4,0), Point(5,0), Point(0,1), Point(1,1), Point(2,1), Point(3,1), Point(4,1), Point(5,1), Point(0,2), Point(1,2), Point(2,2), Point(3,2), Point(4,2), Point(5,2))
apple: Point(5,0)
List(Point(0,0), Point(1,0), Point(2,0), Point(0,1), Point(1,1), Point(2,1), Point(3,1), Point(4,1), Point(5,1), Point(0,2), Point(1,2), Point(2,2), Point(3,2), Point(4,2), Point(5,2))
apple: Point(2,0)
List(Point(0,1), Point(1,1), Point(2,1), Point(3,1), Point(4,1), Point(5,1), Point(0,2), Point(1,2), Point(2,2), Point(3,2), Point(4,2), Point(5,2))
apple: Point(2,1)
List(Point(0,1), Point(1,1), Point(3,1), Point(4,1), Point(5,1), Point(0,2), Point(1,2), Point(3,2), Point(4,2), Point(5,2))
apple: Point(3,1)
List(Point(3,0), Point(0,2), Point(1,2), Point(3,2), Point(4,2), Point(5,2))
apple: Point(1,2)
List(Point(3,0), Point(4,0), Point(5,0))
apple: Point(5,0)
List(Point(3,0), Point(4,0), Point(5,0), Point(6,0), Point(7,0), Point(8,0), Point(9,0), Point(0,1), Point(1,1), Point(2,1), Point(3,1), Point(4,1), Point(5,1), Point(6,1), Point(7,1), Point(8,1), Point(9,1), Point(0,2), Point(1,2), Point(2,2), Point(3,2), Point(4,2), Point(5,2), Point(6,2), Point(7,2), Point(8,2), Point(9,2), Point(0,3), Point(1,3), Point(2,3), Point(3,3), Point(4,3), Point(5,3), Point(6,3), Point(7,3), Point(8,3), Point(9,3), Point(0,4), Point(1,4), Point(2,4), Point(3,4), Point(4,4), Point(5,4), Point(6,4), Point(7,4), Point(8,4), Point(9,4), Point(0,5), Point(1,5), Point(2,5), Point(3,5), Point(4,5), Point(5,5), Point(6,5), Point(7,5), Point(8,5), Point(9,5), Point(0,6), Point(1,6), Point(2,6), Point(3,6), Point(4,6), Point(5,6), Point(6,6), Point(7,6), Point(8,6), Point(9,6))
apple: Point(5,0)
List(Point(0,0), Point(1,0), Point(2,0), Point(6,0), Point(7,0), Point(8,0), Point(9,0), Point(0,1), Point(1,1), Point(2,1), Point(3,1), Point(4,1), Point(5,1), Point(6,1), Point(7,1), Point(8,1), Point(9,1), Point(0,2), Point(1,2), Point(2,2), Point(3,2), Point(4,2), Point(5,2), Point(6,2), Point(7,2), Point(8,2), Point(9,2), Point(0,3), Point(1,3), Point(2,3), Point(3,3), Point(4,3), Point(5,3), Point(6,3), Point(7,3), Point(8,3), Point(9,3), Point(0,4), Point(1,4), Point(2,4), Point(3,4), Point(4,4), Point(5,4), Point(6,4), Point(7,4), Point(8,4), Point(9,4), Point(0,5), Point(1,5), Point(2,5), Point(3,5), Point(4,5), Point(5,5), Point(6,5), Point(7,5), Point(8,5), Point(9,5), Point(0,6), Point(1,6), Point(2,6), Point(3,6), Point(4,6), Point(5,6), Point(6,6), Point(7,6), Point(8,6), Point(9,6))
apple: Point(2,0)
List(Point(3,0), Point(4,0), Point(5,0), Point(6,0), Point(0,1), Point(1,1), Point(2,1), Point(3,1), Point(4,1), Point(5,1), Point(6,1), Point(7,1), Point(8,1), Point(9,1), Point(0,2), Point(1,2), Point(2,2), Point(3,2), Point(4,2), Point(5,2), Point(6,2), Point(7,2), Point(8,2), Point(9,2), Point(0,3), Point(1,3), Point(2,3), Point(3,3), Point(4,3), Point(5,3), Point(6,3), Point(7,3), Point(8,3), Point(9,3), Point(0,4), Point(1,4), Point(2,4), Point(3,4), Point(4,4), Point(5,4), Point(6,4), Point(7,4), Point(8,4), Point(9,4), Point(0,5), Point(1,5), Point(2,5), Point(3,5), Point(4,5), Point(5,5), Point(6,5), Point(7,5), Point(8,5), Point(9,5), Point(0,6), Point(1,6), Point(2,6), Point(3,6), Point(4,6), Point(5,6), Point(6,6), Point(7,6), Point(8,6), Point(9,6))
apple: Point(5,0)
List(Point(6,0), Point(0,1), Point(1,1), Point(2,1), Point(3,1), Point(4,1), Point(5,1), Point(6,1), Point(7,1), Point(8,1), Point(9,1), Point(0,2), Point(1,2), Point(2,2), Point(3,2), Point(4,2), Point(5,2), Point(6,2), Point(7,2), Point(8,2), Point(9,2), Point(0,3), Point(1,3), Point(2,3), Point(3,3), Point(4,3), Point(5,3), Point(6,3), Point(7,3), Point(8,3), Point(9,3), Point(0,4), Point(1,4), Point(2,4), Point(3,4), Point(4,4), Point(5,4), Point(6,4), Point(7,4), Point(8,4), Point(9,4), Point(0,5), Point(1,5), Point(2,5), Point(3,5), Point(4,5), Point(5,5), Point(6,5), Point(7,5), Point(8,5), Point(9,5), Point(0,6), Point(1,6), Point(2,6), Point(3,6), Point(4,6), Point(5,6), Point(6,6), Point(7,6), Point(8,6), Point(9,6))
apple: Point(1,1)
List(Point(0,0), Point(1,0), Point(2,0), Point(3,0), Point(4,0), Point(5,0), Point(6,0), Point(7,0), Point(8,0), Point(9,0), Point(0,1), Point(5,1), Point(6,1), Point(7,1), Point(8,1), Point(9,1), Point(0,2), Point(1,2), Point(2,2), Point(3,2), Point(5,2), Point(6,2), Point(7,2), Point(8,2), Point(9,2), Point(0,3), Point(1,3), Point(2,3), Point(3,3), Point(5,3), Point(6,3), Point(7,3), Point(8,3), Point(9,3), Point(0,4), Point(1,4), Point(2,4), Point(3,4), Point(5,4), Point(6,4), Point(7,4), Point(8,4), Point(9,4), Point(5,5), Point(6,5), Point(7,5), Point(8,5), Point(9,5), Point(0,6), Point(1,6), Point(2,6), Point(3,6), Point(4,6), Point(5,6), Point(6,6), Point(7,6), Point(8,6), Point(9,6))
apple: Point(2,0)
List(Point(0,0), Point(1,0), Point(9,0), Point(1,1), Point(2,1), Point(3,1), Point(4,1), Point(5,1), Point(6,1), Point(7,1), Point(0,2), Point(1,2), Point(2,2), Point(3,2), Point(4,2), Point(5,2), Point(6,2), Point(7,2), Point(9,2), Point(0,3), Point(1,3), Point(2,3), Point(3,3), Point(4,3), Point(5,3), Point(6,3), Point(7,3), Point(9,3), Point(0,4), Point(1,4), Point(2,4), Point(3,4), Point(4,4), Point(5,4), Point(6,4), Point(7,4), Point(9,4), Point(0,5), Point(1,5), Point(2,5), Point(3,5), Point(4,5), Point(5,5), Point(6,5), Point(7,5), Point(9,5), Point(0,6), Point(1,6), Point(2,6), Point(3,6), Point(4,6), Point(5,6), Point(6,6), Point(7,6), Point(9,6))
apple: Point(9,0)
List(Point(3,0), Point(4,0), Point(5,0), Point(0,1), Point(1,1), Point(2,1), Point(3,1), Point(4,1), Point(5,1), Point(0,2), Point(1,2), Point(2,2), Point(3,2), Point(4,2), Point(5,2))
apple: Point(5,0)
List(Point(3,0), Point(4,0), Point(5,0), Point(6,0), Point(7,0), Point(8,0), Point(9,0), Point(0,1), Point(1,1), Point(2,1), Point(3,1), Point(4,1), Point(5,1), Point(6,1), Point(7,1), Point(8,1), Point(9,1), Point(0,2), Point(1,2), Point(2,2), Point(3,2), Point(4,2), Point(5,2), Point(6,2), Point(7,2), Point(8,2), Point(9,2), Point(0,3), Point(1,3), Point(2,3), Point(3,3), Point(4,3), Point(5,3), Point(6,3), Point(7,3), Point(8,3), Point(9,3), Point(0,4), Point(1,4), Point(2,4), Point(3,4), Point(4,4), Point(5,4), Point(6,4), Point(7,4), Point(8,4), Point(9,4), Point(0,5), Point(1,5), Point(2,5), Point(3,5), Point(4,5), Point(5,5), Point(6,5), Point(7,5), Point(8,5), Point(9,5), Point(0,6), Point(1,6), Point(2,6), Point(3,6), Point(4,6), Point(5,6), Point(6,6), Point(7,6), Point(8,6), Point(9,6))
apple: Point(5,0)
List(Point(0,0), Point(1,0), Point(2,0), Point(0,1), Point(1,1), Point(2,1), Point(3,1), Point(4,1), Point(5,1), Point(0,2), Point(1,2), Point(2,2), Point(3,2), Point(4,2), Point(5,2))
apple: Point(2,0)
List(Point(0,0), Point(1,0), Point(6,0), Point(7,0), Point(8,0), Point(9,0), Point(0,1), Point(1,1), Point(2,1), Point(3,1), Point(4,1), Point(5,1), Point(6,1), Point(7,1), Point(8,1), Point(9,1), Point(0,2), Point(1,2), Point(2,2), Point(3,2), Point(4,2), Point(5,2), Point(6,2), Point(7,2), Point(8,2), Point(9,2), Point(0,3), Point(1,3), Point(2,3), Point(3,3), Point(4,3), Point(5,3), Point(6,3), Point(7,3), Point(8,3), Point(9,3), Point(0,4), Point(1,4), Point(2,4), Point(3,4), Point(4,4), Point(5,4), Point(6,4), Point(7,4), Point(8,4), Point(9,4), Point(0,5), Point(1,5), Point(2,5), Point(3,5), Point(4,5), Point(5,5), Point(6,5), Point(7,5), Point(8,5), Point(9,5), Point(0,6), Point(1,6), Point(2,6), Point(3,6), Point(4,6), Point(5,6), Point(6,6), Point(7,6), Point(8,6), Point(9,6))
apple: Point(6,0)
List(Point(3,0), Point(4,0), Point(5,0), Point(0,1), Point(1,1), Point(2,1), Point(3,1), Point(4,1), Point(5,1), Point(0,2), Point(1,2), Point(2,2), Point(3,2), Point(4,2), Point(5,2), Point(0,3), Point(1,3), Point(2,3), Point(3,3), Point(4,3), Point(5,3), Point(0,4), Point(1,4), Point(2,4), Point(3,4), Point(4,4), Point(5,4), Point(0,5), Point(1,5), Point(2,5), Point(3,5), Point(4,5), Point(5,5))
apple: Point(5,0)
List(Point(3,0), Point(4,0), Point(5,0), Point(6,0), Point(7,0), Point(8,0), Point(9,0), Point(0,1), Point(1,1), Point(2,1), Point(3,1), Point(4,1), Point(5,1), Point(6,1), Point(7,1), Point(8,1), Point(9,1), Point(0,2), Point(1,2), Point(2,2), Point(3,2), Point(4,2), Point(5,2), Point(6,2), Point(7,2), Point(8,2), Point(9,2), Point(0,3), Point(1,3), Point(2,3), Point(3,3), Point(4,3), Point(5,3), Point(6,3), Point(7,3), Point(8,3), Point(9,3), Point(0,4), Point(1,4), Point(2,4), Point(3,4), Point(4,4), Point(5,4), Point(6,4), Point(7,4), Point(8,4), Point(9,4), Point(0,5), Point(1,5), Point(2,5), Point(3,5), Point(4,5), Point(5,5), Point(6,5), Point(7,5), Point(8,5), Point(9,5), Point(0,6), Point(1,6), Point(2,6), Point(3,6), Point(4,6), Point(5,6), Point(6,6), Point(7,6), Point(8,6), Point(9,6))
apple: Point(5,0)
List(Point(0,0), Point(1,0), Point(2,0), Point(0,1), Point(1,1), Point(2,1), Point(3,1), Point(4,1), Point(5,1), Point(0,2), Point(1,2), Point(2,2), Point(3,2), Point(4,2), Point(5,2), Point(0,3), Point(1,3), Point(2,3), Point(3,3), Point(4,3), Point(5,3), Point(0,4), Point(1,4), Point(2,4), Point(3,4), Point(4,4), Point(5,4), Point(0,5), Point(1,5), Point(2,5), Point(3,5), Point(4,5), Point(5,5))
apple: Point(2,0)
List(Point(0,0), Point(1,0), Point(6,0), Point(7,0), Point(8,0), Point(9,0), Point(0,1), Point(1,1), Point(2,1), Point(3,1), Point(4,1), Point(5,1), Point(6,1), Point(7,1), Point(8,1), Point(9,1), Point(0,2), Point(1,2), Point(2,2), Point(3,2), Point(4,2), Point(5,2), Point(6,2), Point(7,2), Point(8,2), Point(9,2), Point(0,3), Point(1,3), Point(2,3), Point(3,3), Point(4,3), Point(5,3), Point(6,3), Point(7,3), Point(8,3), Point(9,3), Point(0,4), Point(1,4), Point(2,4), Point(3,4), Point(4,4), Point(5,4), Point(6,4), Point(7,4), Point(8,4), Point(9,4), Point(0,5), Point(1,5), Point(2,5), Point(3,5), Point(4,5), Point(5,5), Point(6,5), Point(7,5), Point(8,5), Point(9,5), Point(0,6), Point(1,6), Point(2,6), Point(3,6), Point(4,6), Point(5,6), Point(6,6), Point(7,6), Point(8,6), Point(9,6))
apple: Point(6,0)
List(Point(3,0), Point(4,0), Point(5,0), Point(0,1), Point(1,1), Point(2,1), Point(3,1), Point(4,1), Point(5,1), Point(0,2), Point(1,2), Point(2,2), Point(3,2), Point(4,2), Point(5,2))
apple: Point(5,0)
List(Point(3,0), Point(4,0), Point(5,0), Point(0,1), Point(1,1), Point(2,1), Point(3,1), Point(4,1), Point(5,1), Point(0,2), Point(1,2), Point(2,2), Point(3,2), Point(4,2), Point(5,2), Point(0,3), Point(1,3), Point(2,3), Point(3,3), Point(4,3), Point(5,3), Point(0,4), Point(1,4), Point(2,4), Point(3,4), Point(4,4), Point(5,4), Point(0,5), Point(1,5), Point(2,5), Point(3,5), Point(4,5), Point(5,5))
apple: Point(5,0)
List(Point(0,0), Point(1,0), Point(2,0), Point(0,1), Point(1,1), Point(2,1), Point(3,1), Point(4,1), Point(5,1), Point(0,2), Point(1,2), Point(2,2), Point(3,2), Point(4,2), Point(5,2))
apple: Point(2,0)
List(Point(0,0), Point(1,0), Point(0,1), Point(1,1), Point(2,1), Point(3,1), Point(4,1), Point(5,1), Point(0,2), Point(1,2), Point(2,2), Point(3,2), Point(4,2), Point(5,2), Point(0,3), Point(1,3), Point(2,3), Point(3,3), Point(4,3), Point(5,3), Point(0,4), Point(1,4), Point(2,4), Point(3,4), Point(4,4), Point(5,4), Point(0,5), Point(1,5), Point(2,5), Point(3,5), Point(4,5), Point(5,5))
apple: Point(0,1)
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
